name: Build Release

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - "master"
    paths-ignore:
      - '.github/**'
      - '*.yaml'
      - '*.txt'
      - '*.md'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (defaults to "Nightly")'
        required: false
        default: 'Nightly'
      publish-release:
        description: Publish Release?
        type: boolean
        default: true
      release-body:
        description: Release body
        required: false
        default: 'Latest nightly of QuickLootIE. These builds are untested and may contain bugs.'
      spriggit_tool_version:
        description: Spriggit version (optional)
        required: false

jobs:
  check-changes:
    name: Check for recent changes
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes in the last 24 hours
        id: should_run
        run: |
          CHANGED_FILES=$(git log --since="1 days ago" --name-only --format=format: | grep -Ev '\.(md|txt)$' | wc -l)
          echo "should_run=${CHANGED_FILES}" >> "$GITHUB_ENV"


  build-and-compile:
    name: Build Plugin, Compile Scripts, and Build SKSE Plugin
    needs: check-changes
    if: ${{ needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' && always() }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_plugin: true
            compile_scripts: false
            compile_skse: false
          - os: windows-latest
            build_plugin: false
            compile_scripts: true
            compile_skse: false
          - os: windows-latest
            build_plugin: false
            compile_scripts: false
            compile_skse: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Spriggit
        if: matrix.build_plugin == 'true'
        id: cache-spriggit
        uses: actions/cache@v4
        with:
          path: .github/spriggit
          key: ${{ runner.os }}-spriggit-${{ inputs.spriggit_tool_version }}

      - name: Fetch Spriggit
        if: matrix.build_plugin == 'true' && steps.cache-spriggit.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release download -O .github/spriggit.zip -p 'SpriggitLinuxCLI.zip' -R Mutagen-Modding/Spriggit ${{ inputs.spriggit_tool_version }}
          7z x .github/spriggit.zip -o.github/spriggit
          chmod +x .github/spriggit/Spriggit.CLI

      - name: Run Spriggit
        if: matrix.build_plugin == 'true'
        run: .github/spriggit/Spriggit.CLI deserialize --InputPath "${{ github.workspace }}/Papyrus/Source/ESP" --OutputPath "${{ github.workspace }}/to-pack/QuickLootIE.esp"


      - name: Cache Script Sources
        if: matrix.compile_scripts == 'true'
        id: cache-ss
        uses: actions/cache@v4
        with:
          path: |
            .github/Papyrus/SRC
            .github/Papyrus/SRC_SKYUI
            .github/Papyrus/SRC_PAPUTIL
            .github/Papyrus/SRC/TESV_Papyrus_Flags.flg
          key: script-sources-clean

      - name: Cache Compiler
        if: matrix.compile_scripts == 'true'
        id: cache-com
        uses: actions/cache@v4
        with:
          path: .github/Caprica
          key: ${{ runner.os }}-papyrus-compiler

      - name: Fetch Caprica 0.3.0
        if: matrix.compile_scripts == 'true' && steps.cache-com.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release download -O .github/Caprica.7z -p '*.7z' -R Orvid/Caprica v0.3.0
          7z x .github/Caprica.7z "-o.github\Caprica"

      - name: Checkout Papyrus Sources
        if: matrix.compile_scripts == 'true' && steps.cache-ss.outputs.cache-hit != 'true'
        run: |
          mkdir .github/Papyrus
          $repos = @("SRC", "SRC_SKYUI", "SRC_PAPUTIL")
          Set-Location .github/Papyrus
          foreach ($repo in $repos) {
            New-Item -ItemType Directory -Name $repo
            Set-Location $repo
            git init
            git remote add origin https://github.com/IHateMyKite/PAPYRUS.git
            git sparse-checkout set --no-cone $repo
            git fetch --depth=1 origin main
            git checkout main
            Remove-Item .git -Recurse -Force
            Set-Location ..
          }

      - name: Checkout TESV Flags File
        if: matrix.compile_scripts == 'true' && steps.cache-ss.outputs.cache-hit != 'true'
        run: |
          cd .github/Papyrus/SRC
          mkdir temp
          cd temp
          git init
          git remote add origin https://github.com/Rukan/Grimy-Skyrim-Papyrus-Source.git
          git sparse-checkout set --no-cone 'TESV_Papyrus_Flags.flg'
          git fetch --depth=1 origin master
          git checkout master
          Remove-Item .git -Recurse -Force
          mv TESV_Papyrus_Flags.flg ../TESV_Papyrus_Flags.flg
          Set-Location ..
          Remove-Item temp -Recurse -Force

      - name: Run Caprica
        if: matrix.compile_scripts == 'true'
        run: .github/Caprica/Caprica.exe --game skyrim --import ".github/Papyrus/SRC;.github/Papyrus/SRC_SKYUI;.github/Papyrus/SRC_PAPUTIL;" --output "Scripts" --flags=".github/Papyrus/SRC/TESV_Papyrus_Flags.flg" "${{ github.workspace }}/Papyrus/Source/Scripts" -R -q

      - name: Upload Compiled Scripts Artifact
        if: matrix.compile_scripts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: compiled-scripts
          path: Scripts

      - name: Checkout Full Repo
        if: matrix.compile_skse == 'true'
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache CMake build
        if: matrix.compile_skse == 'true'
        uses: actions/cache@v4
        env:
          cache-name: cmake-build-cache
        with:
          path: |
            ${{ github.workspace }}/build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          restore-keys: |
            ${{ env.cache-name }}-

      - name: Setup VCPKG
        if: matrix.compile_skse == 'true'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: true

      - name: Setup CMake
        if: matrix.compile_skse == 'true'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.24.0"
          ninjaVersion: "~1.11.1"
      
      - name: Compile SKSE plugin
        if: matrix.compile_skse == 'true'
        run: |
          cmake --preset ALL
          cmake --build build --config Debug

      - name: Upload SKSE Plugin Artifact
        if: matrix.compile_skse == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: skse-plugin
          path: |
            ${{ github.workspace }}/build/Debug/QuickLootIE.dll
            ${{ github.workspace }}/build/Debug/QuickLootIE.pdb

  package-mod:
    name: Package all necessary files
    runs-on: ubuntu-latest
    needs: [build-and-compile]
    if: ${{ needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' && always() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin

      - name: Download Compiled Scripts Artifact
        uses: actions/download-artifact@v4
        with:
          name: compiled-scripts
          path: Scripts

      - name: Download SKSE Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: skse-plugin
          path: SKSE

      - name: Create Packing Structure
        run: |
          mkdir -p "${{ github.workspace }}/to-pack/Source/Scripts"
          mkdir -p "${{ github.workspace }}/to-pack/SKSE/Plugins"
          mkdir -p "${{ github.workspace }}/to-pack/Interface"
          mkdir -p "${{ github.workspace }}/to-pack/Scripts"
          cp -a "Papyrus/Source/Scripts/." "${{ github.workspace }}/to-pack/Source/Scripts"
          cp -a "QuickLootIE.esp" "${{ github.workspace }}/to-pack/QuickLootIE.esp"
          cp -a "Papyrus/Interface/." "${{ github.workspace }}/to-pack/Interface"
          cp -a "swf/bin/." "${{ github.workspace }}/to-pack/Interface"
          cp -a "SKSE/." "${{ github.workspace }}/to-pack/SKSE/Plugins"
          cp -a "Scripts/." "${{ github.workspace }}/to-pack/Scripts"
          cp -a "LICENSE" "${{ github.workspace }}/to-pack/QLIE-LICENSE.md"

      - name: Zip Release Files
        uses: vimtor/action-zip@v1.2
        with:
          files: to-pack/.
          dest: QuickLootIE-${{ inputs.version || 'nightly' }}.zip

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: QuickLootIE-${{ inputs.version || 'nightly' }}
          path: QuickLootIE-${{ inputs.version || 'nightly' }}.zip

      - name: Remove Temporary Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            plugin
            skse-plugin
            compiled-scripts

  share-release:
    name: Share release
    needs: package-mod
    if: ${{ inputs.publish-release == true && (needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' && always()) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: QuickLootIE-${{ inputs.version || 'nightly' }}

      - name: Delete Existing Release
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ inputs.version || 'nightly' }}
          github_token: ${{ github.token }}
          delete_release: true

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.13.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          allowUpdates: true
          name: ${{ inputs.version || 'nightly' }}
          draft: false
          body: ${{ inputs.release-body }}
          tag: ${{ inputs.version || 'nightly' }}
          prerelease: true
          makeLatest: false
          removeArtifacts: true
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: QuickLootIE-${{ inputs.version || 'nightly' }}.zip

      - name: Remove Temporary Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: QuickLootIE-${{ inputs.version || 'nightly' }}
