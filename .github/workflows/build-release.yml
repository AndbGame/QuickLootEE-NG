name: Build Release

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (defaults to "Nightly")'
        required: false
      publish-release:
        description: Publish Release?
        type: boolean
        default: true
      spriggit_tool_version:
        description: Spriggit version (optional)
        required: false

jobs:
  check-changes:
    name: Check for recent changes
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs: 
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for changes in the last 24 hours
        id: should_run
        shell: bash
        run: |
          changes=$(git log --since="1 days ago" --name-only | grep "" -c)
          echo "should_run=$changes" >> "$GITHUB_OUTPUT"

  build-plugin:
    name: Build ESP from Spriggit files
    needs: check-changes
    if: ${{ needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' }}
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Output Inputs
        run: |
          echo "GitHub Event Inputs: ${{ toJSON(github.event.inputs) }}"
          echo "Inputs: ${{ toJSON(inputs) }}"

      - uses: actions/checkout@v4

      - name: Copy to Pack Folder
        shell: bash
        run: mkdir -p "${{ github.workspace }}/to-pack"

      - name: Cache Spriggit
        id: cache-spriggit
        uses: actions/cache@v4
        with:
          path: .github/spriggit
          key: ${{ runner.os }}-spriggit-${{ inputs.spriggit_tool_version || 'latest' }}
      
      - name: Fetch spriggit
        if: steps.cache-spriggit.outputs.cache-hit != 'true'
        run: gh release download -O .github/spriggit.zip -p 'SpriggitLinuxCLI.zip' -R Mutagen-Modding/Spriggit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract Spriggit Zip
        if: steps.cache-spriggit.outputs.cache-hit != 'true'
        shell: bash
        run: 7z x .github/spriggit.zip -o.github/spriggit

      - name: Fix spriggit permission
        shell: bash
        run: chmod +x .github/spriggit/Spriggit.CLI

      - name: Run spriggit
        shell: bash
        run: .github/spriggit/Spriggit.CLI deserialize --InputPath "Source/ESP" --OutputPath "${{ github.workspace }}/to-pack/QuickLootEE.esp"

      - uses: actions/upload-artifact@v4
        with:
          name: plugin
          path: ${{ github.workspace }}/to-pack/QuickLootEE.esp

  compile-scripts:
    name: Compile Papyrus scripts
    needs: check-changes
    if: ${{ needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: Source/Scripts

      - name: Cache Script Sources
        id: cache-ss
        uses: actions/cache@v4
        with:
          path: |
            .github/PapyrusSRC
            .github/PapyrusSkyUI
          key: script-sources-clean

      - name: Cache Compiler
        id: cache-com
        uses: actions/cache@v4
        with:
          path: .github/Caprica
          key: ${{ runner.os }}-papyrus-compiler

      - name: Fetch Caprica 0.3.0
        if: steps.cache-com.outputs.cache-hit != 'true'
        shell: bash
        run: gh release download -O .github/Caprica.7z -p '*.7z' -R Orvid/Caprica v0.3.0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Caprica EXE file
        if: steps.cache-com.outputs.cache-hit != 'true'
        shell: bash
        run: 7z x .github/Caprica.7z -o.github/Caprica

      - name: Checkout SkyUI Sources
        if: steps.cache-ss.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd .github
          mkdir PapyrusSkyUI
          cd PapyrusSkyUI
          git init
          git remote add origin https://github.com/IHateMyKite/PAPYRUS.git
          git sparse-checkout set --no-cone 'SRC'
          git sparse-checkout set --no-cone 'SRC_SKYUI'
          git fetch --depth=1 origin main
          git checkout main
          rm -rf .git
        
      - name: Checkout TESV Flags File
        if: steps.cache-ss.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd .github
          mkdir -p PapyrusSkyUI/SRC
          mkdir temp
          cd temp
          git init
          git remote add origin https://github.com/Rukan/Grimy-Skyrim-Papyrus-Source.git
          git sparse-checkout set --no-cone 'TESV_Papyrus_Flags.flg'
          git fetch --depth=1 origin master
          git checkout master
          mv TESV_Papyrus_Flags.flg ../PapyrusSkyUI/SRC/TESV_Papyrus_Flags.flg
          cd ..
          rm -r temp

      - name: Run Caprica
        shell: bash
        run: |
          .github/Caprica/Caprica.exe --game skyrim --import ".github/PapyrusSkyUI/SRC;.github/PapyrusSkyUI/SRC_SKYUI;" --output "Scripts" --flags=".github/PapyrusSkyUI/SRC/TESV_Papyrus_Flags.flg" "Source/Scripts" -R -q
        
      - uses: actions/upload-artifact@v4
        with:
          name: compiled-scripts
          path: Scripts

  compile-skse:
    name: 'Compile QuickLootEE-NG Plugin'
    runs-on: windows-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
     
      - name: Print Working Directory
        shell: bash
        run: pwd

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.24.0"
          ninjaVersion: "~1.11.1"

      - name: Run CMake
        shell: bash
        run: |
          cmake --preset ALL
          cmake --build build --config Debug --compile-no-warning-as-error

  package-mod:
    name: Package all necessary files
    runs-on: ubuntu-latest
    needs: [build-plugin, compile-scripts, compile-skse]
    if: ${{ needs.check-changes.outputs.should_run >= 1 || github.event_name == 'workflow_dispatch' }}
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: plugin
      
      - uses: actions/download-artifact@v4
        with: 
          name: compiled-scripts
          path: Scripts

      - name: Create packing structure
        shell: bash
        run: |
          mkdir -p "${{ github.workspace }}/to-pack/"
          cp "QuickLootEE.esp" "${{ github.workspace }}/to-pack/QuickLootEE.esp"
          cp -a "SKSE" "${{ github.workspace }}/to-pack/SKSE"
